spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        highlight_sql: true
    
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID} # 웹용 클라이언트 ID
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "https://cherrydan.com/api/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email
          naver:
            client-id: ${NAVER_CLIENT_ID} # 웹용 클라이언트 ID
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "https://cherrydan.com/api/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
          google:
            client-id: ${GOOGLE_CLIENT_IDS}
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  application:
    name: cherrydan

jwt:
  secret: ${JWT_SECRET}
  access-token:
    validity-in-minutes: 60
  refresh-token:
    validity-in-days: 14

server:
  port: ${SERVER_PORT:8080}
  forward-headers-strategy: native
  tomcat:
    use-relative-redirects: true

logging:
  level:
    com.example.cherrydan: INFO
    org.hibernate.SQL: off
    org.springframework.web: INFO
    # Broken pipe 에러 로그 줄이기
    org.apache.catalina.connector: WARN
    org.apache.coyote: WARN
    org.springframework.web.context.request.async: WARN
    org.hibernate.orm.jdbc.bind: TRACE 
  file:
    name: /var/log/cherrydan/application.log

# OAuth2 Redirect URLs
oauth2:
  redirect:
    success-url: ${OAUTH2_REDIRECT_SUCCESS_URL}
    failure-url: ${OAUTH2_REDIRECT_FAILURE_URL}

apple:
  client-id: ${APPLE_CLIENT_ID}
  issuer: https://appleid.apple.com
  keys-url: https://appleid.apple.com/auth/keys

# SNS OAuth 설정 (프로덕션)
sns:
  oauth:
    platforms:
      instagram:
        client-id: ${INSTAGRAM_CLIENT_ID}
        client-secret: ${INSTAGRAM_CLIENT_SECRET}
        redirect-uri: ${INSTAGRAM_REDIRECT_URI}
        auth-url: https://api.instagram.com/oauth/authorize
        token-url: https://api.instagram.com/oauth/access_token
        scope: user_profile,user_media
      youtube:
        client-id: ${YOUTUBE_CLIENT_ID}
        client-secret: ${YOUTUBE_CLIENT_SECRET}
        redirect-uri: ${YOUTUBE_REDIRECT_URI}
        auth-url: https://accounts.google.com/o/oauth2/v2/auth
        token-url: https://oauth2.googleapis.com/token
        scope: https://www.googleapis.com/auth/youtube.readonly
      tiktok:
        client-id: ${TIKTOK_CLIENT_ID}
        client-secret: ${TIKTOK_CLIENT_SECRET}
        redirect-uri: ${TIKTOK_REDIRECT_URI}
        auth-url: https://www.tiktok.com/v2/auth/authorize
        token-url: https://open.tiktokapis.com/v2/oauth/token
        scope: user.info.basic

fcm:
  service-account-key-path: ${FCM_SERVICE_ACCOUNT_KEY_PATH}

cdn:
  base-url: ${CLOUDFRONT_URL:https://cdn.cherrydan.com/}

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,readiness,liveness
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true